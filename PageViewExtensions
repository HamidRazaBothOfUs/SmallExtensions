fun LifecycleOwner.IncludeAutoUpdate(viewPager:ViewPager2){
    var skipThisTime=false
    viewPager.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
        override fun onPageSelected(position: Int) {
            skipThisTime=true
        }
    })
    val job = lifecycleScope.launch(Dispatchers.Main, start = CoroutineStart.LAZY) {
        repeat(3000) {
            delay(3000)
            if (skipThisTime){
                skipThisTime=false
                return@repeat
            }
            try {
                var lastMoved=viewPager.currentItem
                viewPager.adapter?.let {
                    if(it.itemCount>lastMoved+1){
                        viewPager.setCurrentItem(lastMoved+1,true)
                    }else{
                        viewPager.setCurrentItem(0,true)
                    }
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
    job.start()
}



fun ViewPager2.showLeftRightSizedPreview(){
    // You need to retain one page on each side so that the next and previous items are visible
    this.offscreenPageLimit = 1

// Add a PageTransformer that translates the next and previous items horizontally
// towards the center of the screen, which makes them visible
    val nextItemVisiblePx = resources.getDimension(R.dimen.viewpager_next_item_visible)
    val currentItemHorizontalMarginPx = resources.getDimension(R.dimen.viewpager_current_item_horizontal_margin)
    val pageTranslationX = nextItemVisiblePx + currentItemHorizontalMarginPx
    val pageTransformer = ViewPager2.PageTransformer { page: View, position: Float ->
        page.translationX = -pageTranslationX * position
        // Next line scales the item's height. You can remove it if you don't want this effect
       // page.scaleY = 1 - (0.15f * Math.abs(position))
        // If you want a fading effect uncomment the next line:
        // page.alpha = 0.25f + (1 - abs(position))
    }
    this.setPageTransformer(pageTransformer)

// The ItemDecoration gives the current (centered) item horizontal margin so that
// it doesn't occupy the whole screen width. Without it the items overlap
    val itemDecoration = HorizontalMarginItemDecoration(
        context,
        R.dimen.viewpager_current_item_horizontal_margin
    )
    this.addItemDecoration(itemDecoration)
}
